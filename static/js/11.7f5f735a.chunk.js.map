{"version":3,"sources":["views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollRoundData.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx","hooks/useLastUpdated.ts","hooks/usePreviousValue.ts","hooks/useTokenBalance.ts","utils/getTimePeriods.ts"],"names":["HistoryTabs","useGetLatestOraclePrice","useState","BIG_ZERO","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","chainlinkOracleContract","useChainlinkOracleContract","useEffect","a","methods","latestAnswer","call","response","getBalanceAmount","BigNumber","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollRoundData","account","useWeb3React","getMarketData","marketData","updateMarketData","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","useRef","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","current","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","useTheme","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","getBnbAmount","bnbBn","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","getMultiplier","total","amount","getPayout","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getBubbleGumBackground","Modal","ModalContainer","CollectRoundWinningsModal","payout","roundId","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toNumber","claim","send","from","once","result","markBetAsCollected","transactionHash","href","error","message","console","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","lockPrice","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","borderColor","StyledRoundResultBox","card","background","RoundResultBox","RoundResult","closePrice","isPositionUp","priceDifference","failed","useIsRefundable","isRefundable","setIsRefundable","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","BetResult","canClaim","useBetCanClaim","Result","WIN","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchBet","getHeaderText","getHeaderIcon","getResultColor","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","status","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","role","scale","Filter","label","StyledHeader","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","Divider","backgroundDisabled","initialPnlSummary","bestRound","getPnlSummary","reduce","rawPayout","getNetPayout","PnlTab","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","UnlockButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","useTooltip","whiteSpace","placement","targetRef","tooltipVisible","tooltip","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","cardHeader","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","my","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","useGetBetByRoundId","BlockProgress","rawProgress","useBlock","currentBlock","progress","primaryStep","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","totalInterval","useGetIntervalBlocks","useGetLastOraclePrice","isBull","gt","priceColor","minus","useCountUp","start","end","duration","decimals","countUp","update","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","dust","DEFAULT_TOKEN_DECIMAL","percentShortcuts","SetPositionCard","percentage","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","balanceDisplay","maxBalance","valueAsBn","percentageOfMaxBalance","percentageDisplay","Number","isNaN","showFieldWarning","minBetAmountBalance","eq","lt","getButtonProps","bnValue","lte","data","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","isWarning","inputProps","name","min","max","onValueChanged","newValue","step","valueLabel","percent","betMethod","decimalValue","getDecimalAmount","errorMsg","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","hash","markPositionAsEntered","useBlockCountdown","secondsRemaining","setSecondsRemaining","web3","getWeb3NoAccount","eth","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","usePreviousValue","fetchCurrentBets","roundIds","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","Math","floor","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","usePersistState","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","initialBlock","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","all","getStaticPredictionsData","staticPredictionsData","intervalBlocks","bufferBlocks","latestRound","find","market","paused","setPredictionStatus","currentRoundStartBlock","futureRounds","halfInterval","i","push","makeFutureRoundResponse","roundData","makeRoundData","transformRoundResponse","initialize","currentRoundStartBlockNumber","history","fetchInitialData","INITIAL","PageLoader","Date","now","setStateLastUpdated","previousLastUpdated","useCallback","setBalance","useWeb3","getBalance","walletBalance","fetchBalance","useTokenBalance","tokenAddress","fastRefresh","useRefresh","contract","getBep20Contract","balanceOf","res","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","delta","abs","timeLeft","years","months","days"],"mappings":"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","file":"static/js/11.7f5f735a.chunk.js","sourcesContent":["import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { getBubbleGumBackground } from '../../helpers'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\nconst getClaimParam = (historyFilter: HistoryFilter) => {\n  switch (historyFilter) {\n    case HistoryFilter.COLLECTED:\n      return true\n    case HistoryFilter.UNCOLLECTED:\n      return false\n    case HistoryFilter.ALL:\n    default:\n      return undefined\n  }\n}\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useChainlinkOracleContract } from 'hooks/useContract'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(BIG_ZERO)\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n  const chainlinkOracleContract = useChainlinkOracleContract()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const response = await chainlinkOracleContract.methods.latestAnswer().call()\n      setPrice(getBalanceAmount(new BigNumber(response), 8))\n    }\n\n    fetchPrice()\n  }, [chainlinkOracleContract, lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 30) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useWeb3React } from '@web3-react/core'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { updateMarketData } from 'state/predictions'\nimport { getMarketData } from 'state/predictions/helpers'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollRoundData = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const timer = setInterval(async () => {\n      const marketData = await getMarketData()\n\n      dispatch(updateMarketData(marketData))\n    }, POLL_TIME_IN_SECONDS * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [account, dispatch])\n}\n\nexport default usePollRoundData\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: 'en',\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme)\n      })\n    }\n  }, [theme])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t(\"This page can't be displayed right now due to an error. Please check back soon.\")}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been cancelled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import BigNumber from 'bignumber.js'\nimport { Bet, BetPosition } from 'state/types'\nimport { DefaultTheme } from 'styled-components'\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const getBnbAmount = (bnbBn: BigNumber) => {\n  return getBalanceAmount(bnbBn, 18)\n}\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier\n}\n\n// TODO: Move this to the UI Kit\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  LinkExternal,\n  ModalCloseButton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport { markBetAsCollected } from 'state/predictions'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { formatBnb } from '../helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  payout: number\n  roundId: string\n  epoch: number\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\n  payout,\n  roundId,\n  epoch,\n  onDismiss,\n  onSuccess,\n}) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = usePriceBnbBusd()\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async (result) => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n\n        dispatch(markBetAsCollected({ account, roundId }))\n        onDismiss()\n        setIsPendingTx(false)\n        toastSuccess(\n          t('Winnings collected!'),\n          <Box>\n            <Text as=\"p\" mb=\"8px\">\n              {t('Your prizes have been sent to your wallet')}\n            </Text>\n            {result.transactionHash && (\n              <LinkExternal href={`https://bscscan.com/tx/${result.transactionHash}`}>\n                {t('View on BscScan')}\n              </LinkExternal>\n            )}\n          </Box>,\n        )\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError('Error', error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\n          <Text>{t('Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  payout: number\n  roundId: string\n  epoch: number\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\n  payout,\n  roundId,\n  epoch,\n  hasClaimed,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  const [onPresentCollectWinningsModal] = useModal(\n    <CollectRoundWinningsModal payout={payout} roundId={roundId} epoch={epoch} onSuccess={onSuccess} />,\n    false,\n  )\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const predictionsContract = usePredictionsContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async () => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n        setIsPendingTx(false)\n        toastSuccess(t('Position reclaimed!'))\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError('Error', error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { formatBnb, formatUsd } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, Round } from 'state/types'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: Round['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\n// LockPriceRow\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.borderColor\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const predictionsContract = usePredictionsContract()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\n\n      if (canClaim) {\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, predictionsContract, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBetCanClaim, usePriceBnbBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchBet } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = result === Result.WIN ? getPayout(bet) : bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    await dispatch(fetchBet({ account, id: bet.id }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton\n            payout={payout}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            hasClaimed={!canClaim}\n            width=\"100%\"\n            mb=\"16px\"\n            onSuccess={handleSuccess}\n          >\n            {t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{t('Your Result')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${result === Result.LOSE ? '-' : '+'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { getMultiplier } from '../../helpers'\nimport { PayoutRow, RoundResult } from '../RoundResult'\nimport BetResult from './BetResult'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResult round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResult>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text>{t('Opening Block')}</Text>\n        <Link href={`https://bscscan.com/block/${bet.round.lockBlock}`} external>\n          {bet.round.lockBlock}\n        </Link>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{t('Closing Block')}</Text>\n        <Link href={`https://bscscan.com/block/${bet.round.endBlock}`} external>\n          {bet.round.endBlock}\n        </Link>\n      </Flex>\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { useBetCanClaim, useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            payout={payout}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Bet } from 'state/types'\nimport HistoricalBet from './HistoricalBet'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n\n  return hasBetHistory ? (\n    <>\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.id} bet={bet} />\n      ))}\n    </>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          Won\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { formatBnb } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: BigNumber\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetCurrentEpoch, usePriceBnbBusd } from 'state/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getPayout } from 'views/Predictions/helpers'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst TREASURY_FEE = 0.03\n\nconst getNetPayout = (bet: Bet) => {\n  const rawPayout = getPayout(bet)\n  const fee = rawPayout * TREASURY_FEE\n  return rawPayout - fee - bet.amount\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.id, payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`https://bscscan.com/address/${account}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchHistory } from 'state/predictions'\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\nimport { HistoryFilter } from 'state/types'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetHistoryByAccount,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const { t } = useTranslation()\n  const bets = useGetHistoryByAccount(account)\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  // Currently the api cannot filter by unclaimed AND won so we do it here\n  // when the user has selected Uncollected only include positions they won\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\n\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <UnlockButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: number\n}\n\nconst StyledEnteredTag = styled(Tag).attrs({\n  variant: 'secondary',\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\n})`\n  font-weight: bold;\n  text-transform: uppercase;\n`\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: number\n  multiplier?: number\n  hasEntered?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean) => {\n    if (isDisabled) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import styled from 'styled-components'\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\n\nconst Card = styled(UIKitCard)`\n  border-radius: 16px;\n`\n\nexport default Card\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  blockNumber: number\n  icon?: ReactElement\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.borderColor\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  border-radius: 16px 16px 0 0;\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { useBetCanClaim } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  roundId: string\n  epoch: number\n  payout: number\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\n  roundId,\n  epoch,\n  payout,\n  isBottom = false,\n  ...props\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const canClaim = useBetCanClaim(account, roundId)\n\n  if (!canClaim) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton payout={payout} roundId={roundId} epoch={epoch} hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: Round\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch, startBlock } = round\n  const estimatedEndBlock = startBlock + interval\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetBetByRoundId } from 'state/hooks'\nimport { RoundResult } from '../RoundResult'\nimport { getPayout } from '../../helpers'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface ExpiredRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { id, epoch, endBlock, lockPrice, closePrice } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const bet = useGetBetByRoundId(account, round.id)\n  const payout = getPayout(bet)\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          blockNumber={endBlock}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n          />\n          <RoundResult round={round} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      <CollectWinningsOverlay roundId={id} epoch={epoch} payout={payout} isBottom={hasEnteredDown} />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\nimport { useBlock } from 'state/hooks'\n\ninterface BlockProgressProps extends ProgressProps {\n  startBlock: number\n  endBlock: number\n}\n\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\n  const { currentBlock } = useBlock()\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default BlockProgress\n","import React from 'react'\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: Round\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const estimatedEndBlock = round.startBlock + interval\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"This round's closing transaction has been submitted to the blockchain, and is waiting to be confirmed.\"),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\">\n                <span ref={targetRef}>\n                  <TooltipText>{t('Calculating')}</TooltipText>\n                  <InfoIcon />\n                </span>\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useCountUp } from 'react-countup'\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useBlock, useGetIntervalBlocks, useGetLastOraclePrice } from 'state/hooks'\nimport BlockProgress from 'components/BlockProgress'\nimport { formatUsd, getBubbleGumBackground } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst GradientBorder = styled.div`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 16px;\n  padding: 1px;\n`\n\nconst GradientCard = styled(Card)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n`\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, lockBlock, totalAmount } = round\n  const { currentBlock } = useBlock()\n  const totalInterval = useGetIntervalBlocks()\n  const price = useGetLastOraclePrice()\n  const isBull = price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n  const estimatedEndBlock = lockBlock + totalInterval\n  const priceDifference = price.minus(lockPrice).toNumber()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (currentBlock > estimatedEndBlock) {\n    return <CalculatingCard round={round} />\n  }\n\n  return (\n    <GradientBorder>\n      <GradientCard>\n        <CardHeader\n          status=\"live\"\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n          title={t('Live')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlock} />\n        <CardBody p=\"16px\">\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            hasEntered={hasEnteredUp}\n            isActive={isBull}\n          />\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n              {t('Last Price')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n              <div ref={targetRef}>\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n                </TooltipText>\n              </div>\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n                {formatUsd(priceDifference)}\n              </PositionTag>\n            </Flex>\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n            <PrizePoolRow totalAmount={totalAmount} />\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            isActive={!isBull}\n          />\n        </CardBody>\n      </GradientCard>\n      {tooltipVisible && tooltip}\n    </GradientBorder>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { BetPosition } from 'state/types'\nimport { getDecimalAmount } from 'utils/formatBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport PositionTag from '../PositionTag'\nimport { getBnbAmount } from '../../helpers'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\nimport Card from './Card'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  onBack: () => void\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\n}\n\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getPercentDisplay = (percentage: number) => {\n  if (Number.isNaN(percentage)) {\n    return ''\n  }\n\n  if (percentage > 100) {\n    return ''\n  }\n\n  if (percentage < 0) {\n    return ''\n  }\n\n  return `${percentage.toLocaleString(undefined, { maximumFractionDigits: 1 })}%`\n}\n\nconst getButtonProps = (value: BigNumber, bnbBalance: BigNumber, minBetAmountBalance: number) => {\n  if (bnbBalance.eq(0)) {\n    return { id: 999, fallback: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0) || value.isNaN()) {\n    return { id: 999, fallback: 'Enter an amount', disabled: true }\n  }\n  return { id: 464, fallback: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n\n  const balanceDisplay = getBnbAmount(bnbBalance).toNumber()\n  const maxBalance = getBnbAmount(bnbBalance.gt(dust) ? bnbBalance.minus(dust) : bnbBalance).toNumber()\n  const valueAsBn = new BigNumber(value)\n\n  const percentageOfMaxBalance = valueAsBn.div(maxBalance).times(100).toNumber()\n  const percentageDisplay = getPercentDisplay(percentageOfMaxBalance)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n  const minBetAmountBalance = getBnbAmount(minBetAmount).toNumber()\n\n  const handleChange = (input) => {\n    setValue(input)\n  }\n\n  const handleSliderChange = (newValue: number) => {\n    setValue(newValue.toString())\n  }\n\n  const setMax = () => {\n    setValue(maxBalance.toString())\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { fallback, disabled } = getButtonProps(valueAsBn, bnbBalance, minBetAmountBalance)\n\n  const handleEnterPosition = () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n    const decimalValue = getDecimalAmount(valueAsBn)\n\n    predictionsContract.methods[betMethod]()\n      .send({ from: account, value: decimalValue })\n      .once('sending', () => {\n        setIsTxPending(true)\n      })\n      .once('receipt', async (result) => {\n        setIsTxPending(false)\n        onSuccess(decimalValue, result.transactionHash as string)\n      })\n      .once('error', (error) => {\n        const errorMsg = t('An error occurred, unable to enter your position')\n\n        toastError('Error!', error?.message)\n        setIsTxPending(false)\n        console.error(errorMsg, error)\n      })\n  }\n\n  // Warnings\n  useEffect(() => {\n    const bnValue = new BigNumber(value)\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ id: 999, fallback: 'Insufficient BNB balance' })\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\n      setErrorMessage({\n        fallback: 'A minimum amount of %num% %token% is required',\n        data: { num: minBetAmountBalance, token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.fallback, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t(`Balance: ${balanceDisplay}`, { num: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={maxBalance}\n          value={valueAsBn.lte(maxBalance) ? valueAsBn.toNumber() : 0}\n          onValueChanged={handleSliderChange}\n          step={0.000000000000001}\n          valueLabel={account ? percentageDisplay : ''}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percent) => {\n            const handleClick = () => {\n              setValue(((percent / 100) * maxBalance).toString())\n            }\n\n            return (\n              <Button\n                key={percent}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percent}%`}\n              </Button>\n            )\n          })}\n          <Button scale=\"xs\" variant=\"tertiary\" onClick={setMax} disabled={!account || isTxPending}>\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(fallback)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t(\"You won't be able to remove or change your position once you enter it.\")}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, Round } from 'state/types'\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\nimport { markPositionAsEntered } from 'state/predictions'\nimport useToast from 'hooks/useToast'\nimport CardFlip from '../CardFlip'\nimport { formatBnb, getBnbAmount } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const interval = useGetIntervalBlocks()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { currentBlock } = useBlock()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = currentBlock >= round.startBlock + interval\n  const positionDisplay = position === BetPosition.BULL ? 'UP' : 'DOWN'\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n  const estimatedLockBlock = round.startBlock + interval\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getCanEnterPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\n    // Optimistically set the user bet so we see the entered position immediately.\n    dispatch(\n      markPositionAsEntered({\n        account,\n        roundId: round.id,\n        bet: {\n          hash,\n          round,\n          position,\n          amount: getBnbAmount(decimalValue).toNumber(),\n          claimed: false,\n        },\n      }),\n    )\n\n    handleBack()\n\n    toastSuccess(\n      'Success!',\n      t(`${positionDisplay} position entered`, {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          blockNumber={estimatedLockBlock}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useEffect, useRef, useState } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useBlockCountdown = (blockNumber: number) => {\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\n\n  useEffect(() => {\n    const startCountdown = async () => {\n      const web3 = getWeb3NoAccount()\n      const currentBlock = await web3.eth.getBlockNumber()\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current)\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining((prevSecondsRemaining) => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current)\n            }\n\n            return prevSecondsRemaining - 1\n          })\n        }, 1000)\n      }\n    }\n\n    startCountdown()\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [setSecondsRemaining, blockNumber, timer])\n\n  return secondsRemaining\n}\n\nexport default useBlockCountdown\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useRoundCountdown = (intervalsToAdd = 1) => {\n  const interval = useGetIntervalBlocks()\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\n  const blocksToAdd = intervalsToAdd * interval\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\n\n  return seconds\n}\n\nexport default useRoundCountdown\n","import React from 'react'\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\nimport { formatRoundTime } from '../../helpers'\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: Round\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const currentEpoch = useGetCurrentEpoch()\n  const estimatedEndBlock = round.startBlock + interval\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\n  const countdown = formatRoundTime(seconds)\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"soon\"\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Later')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByRoundId, useGetCurrentEpoch } from 'state/hooks'\nimport { BetPosition, Round } from 'state/types'\nimport { getMultiplier } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: Round\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { id, epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const bet = useGetBetByRoundId(account, id)\n  const hasEntered = bet !== null\n  const hasEnteredUp = hasEntered && bet.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && bet.position === BetPosition.BEAR\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={bet?.amount}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={bet?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      betAmount={bet?.amount}\n      bullMultiplier={bullMultiplier}\n      bearMultiplier={bearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\nimport { useGetLastOraclePrice } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useRoundCountdown from '../hooks/useRoundCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 60px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  display: flex;\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: 16px;\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval }) => {\n  const seconds = useRoundCountdown()\n  const countdown = formatRoundTime(seconds)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {seconds === 0 ? t('Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{interval}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Card)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <IconButton\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </IconButton>\n          </HelpButtonWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport { fetchCurrentBets } from 'state/predictions'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: rounds.map((round) => round.id) }))\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap/uikit'\nimport { useGetSortedRounds } from 'state/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC = () => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const initialIndex = Math.floor(rounds.length / 2)\n\n  useOnNextRound()\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={initialIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.id}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\n\nenum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && (\n              <div>\n                <Positions />\n              </div>\n            )}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ChartDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Text as=\"p\" mb=\"16px\">\n          {t('Charts are provided for reference only, and do not reflect rounds’ final outcome.')}\n        </Text>\n        <Text as=\"p\" mb=\"16px\">\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\n        </Text>\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n          {t('I understand')}\n        </Button>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n            external\n          >\n            {t('Learn More')}\n          </LinkExternal>\n        </Flex>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\nimport {\n  getMarketData,\n  getStaticPredictionsData,\n  makeFutureRoundResponse,\n  makeRoundData,\n  transformRoundResponse,\n} from 'state/predictions/helpers'\nimport { fetchCurrentBets, initialize, setPredictionStatus } from 'state/predictions'\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollRoundData from './hooks/usePollRoundData'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer from './components/ChartDisclaimer'\n\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\n\nconst Predictions = () => {\n  const { isXl } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, 'pancake_predictions_accepted_risk')\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, 'pancake_predictions_chart')\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const isDesktop = isXl\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const handleAcceptChart = () => setHasAcceptedChart(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: marketData.rounds.map((round) => round.id) }))\n\n      if (marketData.market.paused) {\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\n        const currentRoundStartBlock = Number(latestRound.startBlock)\n        const futureRounds = []\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\n\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\n        }\n\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\n\n        dispatch(\n          initialize({\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\n            historyFilter: HistoryFilter.ALL,\n            currentRoundStartBlockNumber: currentRoundStartBlock,\n            rounds: roundData,\n            history: {},\n            bets: {},\n          }),\n        )\n      } else {\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\n      }\n    }\n\n    // Do not start initialization until the first block has been retrieved\n    if (initialBlock > 0) {\n      fetchInitialData()\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollRoundData()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n"],"sourceRoot":""}